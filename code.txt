#include "config.h"
#include <Wire.h> 

#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);

/************************ Example Starts Here *******************************/

// analog pin 0
#define PHOTOCELL_PIN A0
const int soundsensor=D5;
int sensorstate=1;
// photocell state
int current = 0;
int last = -1;
// set up the 'analog' feed
AdafruitIO_Feed *analog = io.feed("air");
AdafruitIO_Feed *digital = io.feed("sound");
AdafruitIO_Feed *digital1 = io.feed("display");

void setup() {

  // start the serial connection
  
  Serial.begin(115200);
       lcd.init();
       lcd.backlight();
       lcd.clear();
       lcd.setCursor(0,0);
  lcd.print("AIR AND SOUND");
lcd.setCursor(0,1);
lcd.print("POLLUTION..");
 delay(1500);
  // wait for serial monitor to open
  while(! Serial);

  // connect to io.adafruit.com
  Serial.print("Connecting to Adafruit IO");
  io.connect();

  // wait for a connection
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  // we are connected
  Serial.println();
  Serial.println(io.statusText());

}

void loop() {

  // io.run(); is required for all sketches.
  // it should always be present at the top of your loop
  // function. it keeps the client connected to
  // io.adafruit.com, and processes any incoming data.
  io.run();

  // grab the current state of the photocell
  current = analogRead(PHOTOCELL_PIN);
sensorstate=digitalRead(soundsensor);
  // return if the value hasn't changed
  if(current == last)
    return;

  // save the current state to the analog feed
  Serial.print("sending -> ");
  Serial.println(current);
  analog->save(current);

  // store last photocell state
  last = current;

  // wait three seconds (1000 milliseconds == 1 second)
  //
  // because there are no active subscriptions, we can use delay()
  // instead of tracking millis()
  lcd.clear();
       lcd.setCursor(0,0);
  lcd.print("AIR");
lcd.setCursor(0,1);
lcd.print(current);
  lcd.setCursor(7,0);
  lcd.print("Sound");
lcd.setCursor(7,1);
lcd.print("No");
 
  delay(2000);
 
if(current>280){
  
  lcd.clear();
       lcd.setCursor(0,0);
  lcd.print("Air pollution");
lcd.setCursor(0,1);
lcd.print("detected");
 
  digital1->save("Air Pollution detected");
  delay(3000);
  }
  if(sensorstate==HIGH){
    
    
    lcd.clear();
       lcd.setCursor(0,0);
  lcd.print("Sound pollution");
lcd.setCursor(0,1);
lcd.print("detected");
 
  digital1->save("Sound POLLUTION DETECTED");
  delay(3000);
    }
    if(sensorstate==LOW){
    
    
   
  digital1->save("MONITORING AIR AND SOUND POLLUTION");
  delay(3000);
    }
}
